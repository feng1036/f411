<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Object\Sensor.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Object\Sensor.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Tue May 27 23:23:00 2025
<BR><P>
<H3>Maximum Stack Usage =        208 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Sensor_Task &rArr; sensorsDeviceInit &rArr; mpu6500SetTempSensorEnabled &rArr; i2cdevWriteBit &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[9]">_RMP_A7M_Skip</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[28]">RVM_Hyp_Reboot</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">RVM_Hyp_Reboot</a><BR>
 <LI><a href="#[27]">RVM_Log</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">RVM_Putchar</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8]">RMP_Init</a> from rmp_kernel.o(.text.RMP_Init) referenced 2 times from rmp_kernel.o(.text.main)
 <LI><a href="#[7]">RMP_PendSV_Handler</a> from rmp_platform_a7m_rvm.o(.text.RMP_PendSV_Handler) referenced 2 times from rmp_platform_a7m_rvm.o(.text._RMP_Lowlvl_Init)
 <LI><a href="#[6]">RMP_SysTick_Handler</a> from rmp_platform_a7m_rvm.o(.text.RMP_SysTick_Handler) referenced 2 times from rmp_platform_a7m_rvm.o(.text._RMP_Lowlvl_Init)
 <LI><a href="#[5]">Sensor_Task</a> from sensors.o(.text.Sensor_Task) referenced 2 times from rmp_hook.o(.text.RMP_Init_Hook)
 <LI><a href="#[0]">Thd_Vct</a> from prc_sensor.o(.text.Thd_Vct) referenced from prc_sensor_desc.o(.rodata.RVM_Desc)
 <LI><a href="#[9]">_RMP_A7M_Skip</a> from rmp_platform_a7m_rvm_armcc.o(FASTYIELD) referenced from rmp_platform_a7m_rvm_armcc.o(FASTYIELD)
 <LI><a href="#[1]">__RVM_Entry</a> from rvm_platform_a7m_armcc.o(RVM_ENTRY) referenced from prc_sensor_desc.o(.rodata.RVM_Desc)
 <LI><a href="#[2]">__RVM_Stub</a> from rvm_platform_a7m_armcc.o(__RVM_STUB) referenced from prc_sensor_desc.o(.rodata.RVM_Desc)
 <LI><a href="#[3]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from rvm_platform_a7m_armcc.o(RVM_ENTRY)
 <LI><a href="#[4]">main</a> from rmp_kernel.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1]"></a>__RVM_Entry</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rvm_platform_a7m_armcc.o(RVM_ENTRY))
<BR>[Address Reference Count : 1]<UL><LI> prc_sensor_desc.o(.rodata.RVM_Desc)
</UL>
<P><STRONG><a name="[3]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> rvm_platform_a7m_armcc.o(RVM_ENTRY)
</UL>
<P><STRONG><a name="[72]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[12]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[73]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[74]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[75]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[76]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[77]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[c]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280CompensateP
</UL>

<P><STRONG><a name="[e]"></a>__aeabi_l2f</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ffltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAccGyroMeasurements
</UL>

<P><STRONG><a name="[d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[78]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
</UL>

<P><STRONG><a name="[7a]"></a>__fp_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fpstat.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__ieee_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fpstat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[7b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[7c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[7d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1a]"></a>RMP_Clear</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rmp_kernel.o(.text.RMP_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RMP_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Hook
</UL>

<P><STRONG><a name="[8]"></a>RMP_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, rmp_kernel.o(.text.RMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RMP_Init &rArr; RMP_Init_Hook &rArr; RMP_Thd_Crt &rArr; _RMP_A7M_RVM_Yield &rArr; _RMP_Run_High &rArr; RMP_Log &rArr; RMP_Putchar &rArr; RVM_Putchar &rArr; RVM_Hyp_Putchar &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Log
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Plat_Hook
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_A7M_RVM_Yield
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Int_Unmask
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Int_Mask
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Idle
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Hook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmp_kernel.o(.text.main)
</UL>
<P><STRONG><a name="[15]"></a>RMP_Init_Hook</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, rmp_hook.o(.text.RMP_Init_Hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RMP_Init_Hook &rArr; RMP_Thd_Crt &rArr; _RMP_A7M_RVM_Yield &rArr; _RMP_Run_High &rArr; RMP_Log &rArr; RMP_Putchar &rArr; RVM_Putchar &rArr; RVM_Hyp_Putchar &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Vct_Lck
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Evt_Add
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Vct_Phys
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
</UL>

<P><STRONG><a name="[18]"></a>RMP_Init_Idle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rmp_hook.o(.text.RMP_Init_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RMP_Init_Idle &rArr; RVM_Hyp_Vct_Wait &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Vct_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
</UL>

<P><STRONG><a name="[19]"></a>RMP_Log</STRONG> (Thumb, 612 bytes, Stack size 40 bytes, rmp_kernel.o(.text.RMP_Log))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RMP_Log &rArr; RMP_Putchar &rArr; RVM_Putchar &rArr; RVM_Hyp_Putchar &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Delay
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Tim_Handler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Run_High
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
</UL>

<P><STRONG><a name="[20]"></a>RMP_Putchar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rmp_platform_a7m_rvm.o(.text.RMP_Putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RMP_Putchar &rArr; RVM_Putchar &rArr; RVM_Hyp_Putchar &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Log
</UL>

<P><STRONG><a name="[1e]"></a>RMP_Thd_Crt</STRONG> (Thumb, 406 bytes, Stack size 40 bytes, rmp_kernel.o(.text.RMP_Thd_Crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RMP_Thd_Crt &rArr; _RMP_A7M_RVM_Yield &rArr; _RMP_Run_High &rArr; RMP_Log &rArr; RMP_Putchar &rArr; RVM_Putchar &rArr; RVM_Hyp_Putchar &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Log
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Stack_Init
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_A7M_RVM_Yield
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Int_Unmask
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Int_Mask
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Hook
</UL>

<P><STRONG><a name="[25]"></a>RMP_Thd_Delay</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, rmp_kernel.o(.text.RMP_Thd_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = RMP_Thd_Delay &rArr; _RMP_A7M_RVM_Yield &rArr; _RMP_Run_High &rArr; RMP_Log &rArr; RMP_Putchar &rArr; RVM_Putchar &rArr; RVM_Hyp_Putchar &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Log
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_A7M_RVM_Yield
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Int_Unmask
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Int_Mask
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsDeviceInit
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[30]"></a>RVM_Clear</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rvm_syslib.o(.text.RVM_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RVM_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Init
</UL>

<P><STRONG><a name="[1c]"></a>RVM_Hyp_Evt_Add</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, rvm_virtlib.o(.text.RVM_Hyp_Evt_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RVM_Hyp_Evt_Add &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Sig_Snd
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Reboot
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Hook
</UL>

<P><STRONG><a name="[29]"></a>RVM_Hyp_Evt_Snd</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, rvm_virtlib.o(.text.RVM_Hyp_Evt_Snd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RVM_Hyp_Evt_Snd &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Sig_Snd
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Reboot
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[2a]"></a>RVM_Hyp_Int_Ena</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, rvm_virtlib.o(.text.RVM_Hyp_Int_Ena))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RVM_Hyp_Int_Ena &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Sig_Snd
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Reboot
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Plat_Hook
</UL>

<P><STRONG><a name="[2b]"></a>RVM_Hyp_Putchar</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, rvm_virtlib.o(.text.RVM_Hyp_Putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RVM_Hyp_Putchar &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Sig_Snd
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Reboot
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Putchar
</UL>

<P><STRONG><a name="[28]"></a>RVM_Hyp_Reboot</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, rvm_virtlib.o(.text.RVM_Hyp_Reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Sig_Snd
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Reboot
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Plat_Hook
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Evt_Snd
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Int_Ena
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Yield
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Int_Unmask
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Putchar
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Reboot
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Vct_Loop
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thd_Vct
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Vct_Wait
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Vct_Lck
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Evt_Add
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Vct_Phys
</UL>

<P><STRONG><a name="[1d]"></a>RVM_Hyp_Vct_Lck</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, rvm_virtlib.o(.text.RVM_Hyp_Vct_Lck))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RVM_Hyp_Vct_Lck &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Sig_Snd
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Reboot
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Hook
</UL>

<P><STRONG><a name="[1b]"></a>RVM_Hyp_Vct_Phys</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, rvm_virtlib.o(.text.RVM_Hyp_Vct_Phys))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RVM_Hyp_Vct_Phys &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Sig_Snd
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Reboot
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Hook
</UL>

<P><STRONG><a name="[1f]"></a>RVM_Hyp_Vct_Wait</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, rvm_virtlib.o(.text.RVM_Hyp_Vct_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RVM_Hyp_Vct_Wait &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Sig_Snd
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Reboot
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Idle
</UL>

<P><STRONG><a name="[27]"></a>RVM_Log</STRONG> (Thumb, 616 bytes, Stack size 40 bytes, rvm_syslib.o(.text.RVM_Log))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = RVM_Log &rArr;  RVM_Putchar (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Plat_Hook
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Evt_Snd
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Int_Ena
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Yield
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Int_Unmask
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Putchar
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Reboot
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Vct_Loop
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thd_Vct
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Vct_Wait
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Vct_Lck
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Evt_Add
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Vct_Phys
</UL>

<P><STRONG><a name="[22]"></a>RVM_Putchar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, prc_sensor.o(.text.RVM_Putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RVM_Putchar &rArr; RVM_Hyp_Putchar &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Putchar
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Log
</UL>

<P><STRONG><a name="[2c]"></a>RVM_Sig_Rcv</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rvm_syslib.o(.text.RVM_Sig_Rcv))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Svc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Vct_Loop
</UL>

<P><STRONG><a name="[26]"></a>RVM_Sig_Snd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rvm_syslib.o(.text.RVM_Sig_Snd))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Svc
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Evt_Snd
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Int_Ena
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Yield
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Int_Unmask
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Putchar
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Reboot
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Vct_Wait
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Vct_Lck
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Evt_Add
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Vct_Phys
</UL>

<P><STRONG><a name="[2e]"></a>RVM_Vct_Loop</STRONG> (Thumb, 350 bytes, Stack size 0 bytes, rvm_virtlib.o(.text.RVM_Vct_Loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RVM_Vct_Loop &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Sig_Rcv
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Reboot
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thd_Vct
</UL>

<P><STRONG><a name="[4a]"></a>RVM_Virt_Ctx_Reg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rvm_virtlib.o(.text.RVM_Virt_Ctx_Reg))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Lowlvl_Init
</UL>

<P><STRONG><a name="[2f]"></a>RVM_Virt_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rvm_virtlib.o(.text.RVM_Virt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RVM_Virt_Init &rArr; RVM_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thd_Vct
</UL>

<P><STRONG><a name="[13]"></a>RVM_Virt_Int_Mask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rvm_virtlib.o(.text.RVM_Virt_Int_Mask))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Delay
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_A7M_RVM_Yield
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[17]"></a>RVM_Virt_Int_Unmask</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, rvm_virtlib.o(.text.RVM_Virt_Int_Unmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RVM_Virt_Int_Unmask &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Sig_Snd
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Reboot
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Delay
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_A7M_RVM_Yield
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[49]"></a>RVM_Virt_Tim_Reg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rvm_virtlib.o(.text.RVM_Virt_Tim_Reg))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Lowlvl_Init
</UL>

<P><STRONG><a name="[31]"></a>RVM_Virt_Yield</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, rvm_virtlib.o(.text.RVM_Virt_Yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RVM_Virt_Yield &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Sig_Snd
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Reboot
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Tim_Handler
</UL>

<P><STRONG><a name="[5]"></a>Sensor_Task</STRONG> (Thumb, 632 bytes, Stack size 8 bytes, sensors.o(.text.Sensor_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Sensor_Task &rArr; sensorsDeviceInit &rArr; mpu6500SetTempSensorEnabled &rArr; i2cdevWriteBit &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAccGyroMeasurements
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsDeviceInit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetI2CMasterModeEnabled
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetSlaveDelayEnabled
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetIntDataReadyEnabled
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetI2CBypassEnabled
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetInterruptLatchClear
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetInterruptLatch
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetInterruptDrive
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetInterruptMode
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetSlave4MasterDelay
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetSlaveDataLength
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetSlaveEnabled
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetSlaveRegister
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetSlaveAddress
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetMasterClockSpeed
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetSlaveReadWriteTransitionEnabled
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetWaitForExternalSensorEnabled
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280PressureToAltitude
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280CompensateP
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280CompensateT
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevRead
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Delay
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Evt_Snd
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Int_Unmask
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Int_Mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmp_hook.o(.text.RMP_Init_Hook)
</UL>
<P><STRONG><a name="[0]"></a>Thd_Vct</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, prc_sensor.o(.text.Thd_Vct))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Thd_Vct &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Reboot
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Log
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Vct_Loop
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prc_sensor_desc.o(.rodata.RVM_Desc)
</UL>
<P><STRONG><a name="[48]"></a>_RMP_Lowlvl_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rmp_platform_a7m_rvm.o(.text._RMP_Lowlvl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _RMP_Lowlvl_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Ctx_Reg
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Tim_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14]"></a>_RMP_Plat_Hook</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, rmp_platform_a7m_rvm.o(.text._RMP_Plat_Hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _RMP_Plat_Hook &rArr; RVM_Hyp_Int_Ena &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Int_Ena
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Reboot
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
</UL>

<P><STRONG><a name="[21]"></a>_RMP_Run_High</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, rmp_kernel.o(.text._RMP_Run_High))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _RMP_Run_High &rArr; RMP_Log &rArr; RMP_Putchar &rArr; RVM_Putchar &rArr; RVM_Hyp_Putchar &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Log
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_A7M_RVM_MSB_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_PendSV_Handler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_A7M_RVM_Yield
</UL>

<P><STRONG><a name="[24]"></a>_RMP_Stack_Init</STRONG> (Thumb, 112 bytes, Stack size 36 bytes, rmp_platform_a7m_rvm.o(.text._RMP_Stack_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _RMP_Stack_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
</UL>

<P><STRONG><a name="[23]"></a>_RMP_Tim_Handler</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, rmp_kernel.o(.text._RMP_Tim_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _RMP_Tim_Handler &rArr; RMP_Log &rArr; RMP_Putchar &rArr; RVM_Putchar &rArr; RVM_Hyp_Putchar &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Log
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Yield
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_SysTick_Handler
</UL>

<P><STRONG><a name="[46]"></a>bmp280CompensateP</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, bmp280.o(.text.bmp280CompensateP))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bmp280CompensateP &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[45]"></a>bmp280CompensateT</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bmp280.o(.text.bmp280CompensateT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bmp280CompensateT
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[4c]"></a>bmp280Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, bmp280.o(.text.bmp280Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bmp280Init &rArr; i2cdevWriteByte &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteByte
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevRead
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsDeviceInit
</UL>

<P><STRONG><a name="[47]"></a>bmp280PressureToAltitude</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, bmp280.o(.text.bmp280PressureToAltitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bmp280PressureToAltitude &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[50]"></a>i2cdevInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2cdev.o(.text.i2cdevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2cdevInit
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdrvInit
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsDeviceInit
</UL>

<P><STRONG><a name="[43]"></a>i2cdevRead</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, i2cdev.o(.text.i2cdevRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = i2cdevRead &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdrvMessageTransfer
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdrvCreateMessageIntAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280Init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[4d]"></a>i2cdevReadByte</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, i2cdev.o(.text.i2cdevReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = i2cdevReadByte &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdrvMessageTransfer
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdrvCreateMessageIntAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280Init
</UL>

<P><STRONG><a name="[54]"></a>i2cdevWriteBit</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, i2cdev.o(.text.i2cdevWriteBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = i2cdevWriteBit &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdrvMessageTransfer
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdrvCreateMessageIntAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetTempSensorEnabled
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetSleepEnabled
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500Reset
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetI2CMasterModeEnabled
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetSlaveDelayEnabled
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetIntDataReadyEnabled
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetI2CBypassEnabled
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetInterruptLatchClear
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetInterruptLatch
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetInterruptDrive
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetInterruptMode
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetSlaveEnabled
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetSlaveReadWriteTransitionEnabled
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetWaitForExternalSensorEnabled
</UL>

<P><STRONG><a name="[55]"></a>i2cdevWriteBits</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, i2cdev.o(.text.i2cdevWriteBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = i2cdevWriteBits &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdrvMessageTransfer
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdrvCreateMessageIntAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetClockSource
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetSlave4MasterDelay
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetSlaveDataLength
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetMasterClockSpeed
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetAccelDLPF
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetFullScaleAccelRange
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetFullScaleGyroRange
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetDLPFMode
</UL>

<P><STRONG><a name="[4e]"></a>i2cdevWriteByte</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, i2cdev.o(.text.i2cdevWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = i2cdevWriteByte &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdrvMessageTransfer
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdrvCreateMessageIntAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetIntEnabled
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetSlaveRegister
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetSlaveAddress
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetRate
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280Init
</UL>

<P><STRONG><a name="[52]"></a>i2cdrvCreateMessageIntAddr</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, i2c_drv.o(.text.i2cdrvCreateMessageIntAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2cdrvCreateMessageIntAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBits
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteByte
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevRead
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevReadByte
</UL>

<P><STRONG><a name="[51]"></a>i2cdrvInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c_drv.o(.text.i2cdrvInit))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevInit
</UL>

<P><STRONG><a name="[53]"></a>i2cdrvMessageTransfer</STRONG> (Thumb, 1280 bytes, Stack size 40 bytes, i2c_drv.o(.text.i2cdrvMessageTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadPoll
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdrvInitBus
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBits
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteByte
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevRead
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevReadByte
</UL>

<P><STRONG><a name="[65]"></a>lpf2pApply</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, filter.o(.text.lpf2pApply))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAccGyroMeasurements
</UL>

<P><STRONG><a name="[58]"></a>lpf2pInit</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, filter.o(.text.lpf2pInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lpf2pInit &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsDeviceInit
</UL>

<P><STRONG><a name="[4]"></a>main</STRONG> (Thumb, 626 bytes, Stack size 8 bytes, rmp_kernel.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = main &rArr; _RMP_Lowlvl_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Lowlvl_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[67]"></a>mpu6500Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mpu6500.o(.text.mpu6500Init))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsDeviceInit
</UL>

<P><STRONG><a name="[5b]"></a>mpu6500Reset</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mpu6500Reset &rArr; i2cdevWriteBit &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsDeviceInit
</UL>

<P><STRONG><a name="[5c]"></a>mpu6500SetAccelDLPF</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500SetAccelDLPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mpu6500SetAccelDLPF &rArr; i2cdevWriteBits &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBits
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsDeviceInit
</UL>

<P><STRONG><a name="[5d]"></a>mpu6500SetClockSource</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500SetClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mpu6500SetClockSource &rArr; i2cdevWriteBits &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBits
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsDeviceInit
</UL>

<P><STRONG><a name="[5e]"></a>mpu6500SetDLPFMode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500SetDLPFMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mpu6500SetDLPFMode &rArr; i2cdevWriteBits &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBits
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsDeviceInit
</UL>

<P><STRONG><a name="[5f]"></a>mpu6500SetFullScaleAccelRange</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500SetFullScaleAccelRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mpu6500SetFullScaleAccelRange &rArr; i2cdevWriteBits &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBits
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsDeviceInit
</UL>

<P><STRONG><a name="[60]"></a>mpu6500SetFullScaleGyroRange</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500SetFullScaleGyroRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mpu6500SetFullScaleGyroRange &rArr; i2cdevWriteBits &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBits
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsDeviceInit
</UL>

<P><STRONG><a name="[34]"></a>mpu6500SetI2CBypassEnabled</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500SetI2CBypassEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mpu6500SetI2CBypassEnabled &rArr; i2cdevWriteBit &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsDeviceInit
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[41]"></a>mpu6500SetI2CMasterModeEnabled</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500SetI2CMasterModeEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mpu6500SetI2CMasterModeEnabled &rArr; i2cdevWriteBit &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[42]"></a>mpu6500SetIntDataReadyEnabled</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500SetIntDataReadyEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mpu6500SetIntDataReadyEnabled &rArr; i2cdevWriteBit &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[61]"></a>mpu6500SetIntEnabled</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mpu6500.o(.text.mpu6500SetIntEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mpu6500SetIntEnabled &rArr; i2cdevWriteByte &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsDeviceInit
</UL>

<P><STRONG><a name="[37]"></a>mpu6500SetInterruptDrive</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500SetInterruptDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mpu6500SetInterruptDrive &rArr; i2cdevWriteBit &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[38]"></a>mpu6500SetInterruptLatch</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500SetInterruptLatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mpu6500SetInterruptLatch &rArr; i2cdevWriteBit &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[39]"></a>mpu6500SetInterruptLatchClear</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500SetInterruptLatchClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mpu6500SetInterruptLatchClear &rArr; i2cdevWriteBit &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[36]"></a>mpu6500SetInterruptMode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500SetInterruptMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mpu6500SetInterruptMode &rArr; i2cdevWriteBit &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[3b]"></a>mpu6500SetMasterClockSpeed</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500SetMasterClockSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mpu6500SetMasterClockSpeed &rArr; i2cdevWriteBits &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[62]"></a>mpu6500SetRate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mpu6500.o(.text.mpu6500SetRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mpu6500SetRate &rArr; i2cdevWriteByte &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsDeviceInit
</UL>

<P><STRONG><a name="[33]"></a>mpu6500SetSlave4MasterDelay</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500SetSlave4MasterDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mpu6500SetSlave4MasterDelay &rArr; i2cdevWriteBits &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[3c]"></a>mpu6500SetSlaveAddress</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, mpu6500.o(.text.mpu6500SetSlaveAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mpu6500SetSlaveAddress &rArr; i2cdevWriteByte &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[3e]"></a>mpu6500SetSlaveDataLength</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500SetSlaveDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mpu6500SetSlaveDataLength &rArr; i2cdevWriteBits &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[3f]"></a>mpu6500SetSlaveDelayEnabled</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500SetSlaveDelayEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mpu6500SetSlaveDelayEnabled &rArr; i2cdevWriteBit &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[40]"></a>mpu6500SetSlaveEnabled</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500SetSlaveEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mpu6500SetSlaveEnabled &rArr; i2cdevWriteBit &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[3a]"></a>mpu6500SetSlaveReadWriteTransitionEnabled</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500SetSlaveReadWriteTransitionEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mpu6500SetSlaveReadWriteTransitionEnabled &rArr; i2cdevWriteBit &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[3d]"></a>mpu6500SetSlaveRegister</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, mpu6500.o(.text.mpu6500SetSlaveRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mpu6500SetSlaveRegister &rArr; i2cdevWriteByte &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[63]"></a>mpu6500SetSleepEnabled</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500SetSleepEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mpu6500SetSleepEnabled &rArr; i2cdevWriteBit &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsDeviceInit
</UL>

<P><STRONG><a name="[64]"></a>mpu6500SetTempSensorEnabled</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500SetTempSensorEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mpu6500SetTempSensorEnabled &rArr; i2cdevWriteBit &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsDeviceInit
</UL>

<P><STRONG><a name="[35]"></a>mpu6500SetWaitForExternalSensorEnabled</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mpu6500.o(.text.mpu6500SetWaitForExternalSensorEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mpu6500SetWaitForExternalSensorEnabled &rArr; i2cdevWriteBit &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevWriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[44]"></a>processAccGyroMeasurements</STRONG> (Thumb, 1308 bytes, Stack size 120 bytes, sensors.o(.text.processAccGyroMeasurements))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = processAccGyroMeasurements &rArr; __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf2pApply
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[32]"></a>sensorsDeviceInit</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, sensors.o(.text.sensorsDeviceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = sensorsDeviceInit &rArr; mpu6500SetTempSensorEnabled &rArr; i2cdevWriteBit &rArr; i2cdrvMessageTransfer &rArr; i2cdrvInitBus
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetClockSource
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetTempSensorEnabled
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetSleepEnabled
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500Reset
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetIntEnabled
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetI2CBypassEnabled
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetAccelDLPF
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetFullScaleAccelRange
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetFullScaleGyroRange
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetDLPFMode
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500SetRate
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6500Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdevInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf2pInit
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280Init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[5a]"></a>_RMP_Start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rmp_platform_a7m_rvm_armcc.o(ARCH))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>_RMP_A7M_RVM_MSB_Get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rmp_platform_a7m_rvm_armcc.o(ARCH))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Run_High
</UL>

<P><STRONG><a name="[7e]"></a>_RMP_A7M_RVM_LSB_Get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rmp_platform_a7m_rvm_armcc.o(ARCH), UNUSED)

<P><STRONG><a name="[16]"></a>_RMP_A7M_RVM_Yield</STRONG> (Thumb, 420 bytes, Stack size 0 bytes, rmp_platform_a7m_rvm_armcc.o(FASTYIELD))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _RMP_A7M_RVM_Yield &rArr; _RMP_Run_High &rArr; RMP_Log &rArr; RMP_Putchar &rArr; RVM_Putchar &rArr; RVM_Hyp_Putchar &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Run_High
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Int_Unmask
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Int_Mask
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Delay
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
</UL>

<P><STRONG><a name="[2d]"></a>RVM_Svc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rvm_platform_a7m_armcc.o(RVM_SVC))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Sig_Rcv
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Sig_Snd
</UL>

<P><STRONG><a name="[2]"></a>__RVM_Stub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rvm_platform_a7m_armcc.o(__RVM_STUB))
<BR>[Address Reference Count : 1]<UL><LI> prc_sensor_desc.o(.rodata.RVM_Desc)
</UL>
<P><STRONG><a name="[6b]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[4f]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280PressureToAltitude
</UL>

<P><STRONG><a name="[7f]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[66]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAccGyroMeasurements
</UL>

<P><STRONG><a name="[59]"></a>__hardfp_tanf</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, tanf.o(i.__hardfp_tanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpf2pInit
</UL>

<P><STRONG><a name="[6f]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[71]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
</UL>

<P><STRONG><a name="[6e]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[6d]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[6a]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[6c]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[70]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
</UL>

<P><STRONG><a name="[80]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[81]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[82]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[69]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9]"></a>_RMP_A7M_Skip</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rmp_platform_a7m_rvm_armcc.o(FASTYIELD))
<BR>[Address Reference Count : 1]<UL><LI> rmp_platform_a7m_rvm_armcc.o(FASTYIELD)
</UL>
<P><STRONG><a name="[6]"></a>RMP_SysTick_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rmp_platform_a7m_rvm.o(.text.RMP_SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RMP_SysTick_Handler &rArr; _RMP_Tim_Handler &rArr; RMP_Log &rArr; RMP_Putchar &rArr; RVM_Putchar &rArr; RVM_Hyp_Putchar &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Tim_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmp_platform_a7m_rvm.o(.text._RMP_Lowlvl_Init)
</UL>
<P><STRONG><a name="[7]"></a>RMP_PendSV_Handler</STRONG> (Thumb, 392 bytes, Stack size 16 bytes, rmp_platform_a7m_rvm.o(.text.RMP_PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = RMP_PendSV_Handler &rArr; _RMP_Run_High &rArr; RMP_Log &rArr; RMP_Putchar &rArr; RVM_Putchar &rArr; RVM_Hyp_Putchar &rArr; RVM_Hyp_Reboot &rArr;  RVM_Hyp_Reboot (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Run_High
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmp_platform_a7m_rvm.o(.text._RMP_Lowlvl_Init)
</UL>
<P><STRONG><a name="[57]"></a>i2cdrvInitBus</STRONG> (Thumb, 1194 bytes, Stack size 24 bytes, i2c_drv.o(.text.i2cdrvInitBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2cdrvInitBus
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdrvMessageTransfer
</UL>

<P><STRONG><a name="[56]"></a>i2cReadPoll</STRONG> (Thumb, 568 bytes, Stack size 8 bytes, i2c_drv.o(.text.i2cReadPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2cReadPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cdrvMessageTransfer
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
