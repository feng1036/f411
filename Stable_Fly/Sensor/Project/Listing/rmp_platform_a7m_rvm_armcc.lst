


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************
    2 00000000         ;Filename    : rmp_platform_a7m_rvm_armcc.s
    3 00000000         ;Author      : pry
    4 00000000         ;Date        : 09/02/2018
    5 00000000         ;Description : The assembly part of the RMP RTOS for the
                        RVM virtual machine.
    6 00000000         ;*******************************************************
                       **********************/
    7 00000000         
    8 00000000         ;/* The ARMv7-M Architecture ***************************
                       ***********************
    9 00000000         ;R0-R7:General purpose registers that are accessible. 
   10 00000000         ;R8-R12:General purpose registers that can only be reach
                       ed by 32-bit instructions.
   11 00000000         ;R13:SP/SP_process/SP_main    Stack pointer
   12 00000000         ;R14:LR                       Link Register(used for ret
                       urning from a subfunction)
   13 00000000         ;R15:PC                       Program counter.
   14 00000000         ;IPSR                         Interrupt Program Status R
                       egister.
   15 00000000         ;APSR                         Application Program Status
                        Register.
   16 00000000         ;EPSR                         Execute Program Status Reg
                       ister.
   17 00000000         ;The above 3 registers are saved into the stack in combi
                       nation(xPSR).
   18 00000000         ;The ARM Cortex-M4/7 also include a FPU.
   19 00000000         ;*******************************************************
                       **********************/
   20 00000000         
   21 00000000         ;/* Import *********************************************
                       **********************/
   22 00000000         ;The real task switch handling function
   23 00000000                 IMPORT           _RMP_Run_High
   24 00000000         ;The stack address of current thread
   25 00000000                 IMPORT           RMP_SP_Cur
   26 00000000         ;Mask/unmask interrupts
   27 00000000                 IMPORT           RVM_Virt_Int_Mask
   28 00000000                 IMPORT           RVM_Virt_Int_Unmask
   29 00000000         ;Hypercall parameter space
   30 00000000                 IMPORT           RVM_Usr_Param
   31 00000000         ;/* End Import *****************************************
                       **********************/
   32 00000000         
   33 00000000         ;/* Export *********************************************
                       **********************/
   34 00000000         ;Start the first thread
   35 00000000                 EXPORT           _RMP_Start
   36 00000000         ;Get the MSB/LSB in the word
   37 00000000                 EXPORT           _RMP_A7M_RVM_MSB_Get
   38 00000000                 EXPORT           _RMP_A7M_RVM_LSB_Get
   39 00000000         ;Fast-path context switching without invoking the RVM
   40 00000000                 EXPORT           _RMP_A7M_RVM_Yield
   41 00000000         ;/* End Export *****************************************
                       **********************/
   42 00000000         
   43 00000000         ;/* Header *********************************************
                       **********************/



ARM Macro Assembler    Page 2 


   44 00000000                 AREA             ARCH,CODE,READONLY,ALIGN=3
   45 00000000                 THUMB
   46 00000000                 REQUIRE8
   47 00000000                 PRESERVE8
   48 00000000         ;/* End Header *****************************************
                       **********************/
   49 00000000         
   50 00000000         ;/* Function:_RMP_Start ********************************
                       ***********************
   51 00000000         ;Description : Jump to the user function and will never 
                       return from it.
   52 00000000         ;Input       : None.
   53 00000000         ;Output      : None.
   54 00000000         ;Return      : None.
   55 00000000         ;*******************************************************
                       **********************/
   56 00000000         _RMP_Start
                               PROC
   57 00000000 468D            MOV              SP,R1       ;Set the stack poin
                                                            ter
   58 00000002 F3BF 8F6F       ISB
   59 00000006 4700            BX               R0          ;Branch to target
   60 00000008                 ENDP
   61 00000008         ;/* End Function:_RMP_Start ****************************
                       **********************/
   62 00000008         
   63 00000008         ;/* Function:_RMP_A7M_RVM_MSB_Get **********************
                       ***********************
   64 00000008         ;Description : Get the MSB of the word.
   65 00000008         ;Input       : rvm_ptr_t Val - The value.
   66 00000008         ;Output      : None.
   67 00000008         ;Return      : rvm_ptr_t - The MSB position.   
   68 00000008         ;*******************************************************
                       **********************/
   69 00000008         _RMP_A7M_RVM_MSB_Get
                               PROC
   70 00000008 FAB0 F180       CLZ              R1,R0
   71 0000000C F04F 001F       MOV              R0,#31
   72 00000010 EBA0 0001       SUB              R0,R1
   73 00000014 4770            BX               LR
   74 00000016                 ENDP
   75 00000016         ;/* End Function:_RMP_A7M_RVM_MSB_Get ******************
                       **********************/
   76 00000016         
   77 00000016         ;/* Function:_RMP_A7M_RVM_LSB_Get **********************
                       ***********************
   78 00000016         ;Description : Get the LSB of the word.
   79 00000016         ;Input       : rvm_ptr_t Val - The value.
   80 00000016         ;Output      : None.
   81 00000016         ;Return      : rvm_ptr_t - The LSB position.   
   82 00000016         ;*******************************************************
                       **********************/
   83 00000016         _RMP_A7M_RVM_LSB_Get
                               PROC
   84 00000016 FA90 F0A0       RBIT             R0,R0
   85 0000001A FAB0 F080       CLZ              R0,R0
   86 0000001E 4770            BX               LR
   87 00000020                 ENDP
   88 00000020         ;/* End Function:_RMP_A7M_RVM_LSB_Get ******************



ARM Macro Assembler    Page 3 


                       **********************/
   89 00000020         
   90 00000020         ;/* Function:_RMP_A7M_RVM_Yield ************************
                       ***********************
   91 00000020         ;Description : Switch from user code to another thread, 
                       rather than from the 
   92 00000020         ;              interrupt handler. Need to masquerade the
                        context well so that
   93 00000020         ;              it may be recovered from the interrupt ha
                       ndler as well.
   94 00000020         ;              Caveats: 
   95 00000020         ;              1. User-level code cannot clear CONTROL.F
                       PCA (this is correct, 
   96 00000020         ;                 if it can then there is a serious secu
                       rity loophole) hence 
   97 00000020         ;                 all threads in the system will be tain
                       ted with the FPU active
   98 00000020         ;                 flag and include a full context save/r
                       estore. However this is
   99 00000020         ;                 still hugely faster than the slow path
                        through the PendSV.
  100 00000020         ;              2. After the user have stacked up everyth
                       ing on its stack but
  101 00000020         ;                 not disabled its interrupt yet, an int
                       errupt may occur, and
  102 00000020         ;                 stack again on the user stack. This is
                        allowed, but must be
  103 00000020         ;                 taken into account when calculating st
                       ack usage.
  104 00000020         ;
  105 00000020         ;              The exception extended stack layout is as
                        follows:
  106 00000020         ;
  107 00000020         ;               Unaligned           Aligned
  108 00000020         ;               Reserved           
  109 00000020         ;               Reserved            Reserved
  110 00000020         ;               FPSCR               FPSCR
  111 00000020         ;               S15                 S15
  112 00000020         ;               S14                 S14
  113 00000020         ;               S13                 S13
  114 00000020         ;               S12                 S12
  115 00000020         ;               S11                 S11
  116 00000020         ;               S10                 S10
  117 00000020         ;               S9                  S9
  118 00000020         ;               S8                  S8
  119 00000020         ;               S7                  S7
  120 00000020         ;               S6                  S6
  121 00000020         ;               S5                  S5
  122 00000020         ;               S4                  S4
  123 00000020         ;               S3                  S3
  124 00000020         ;               S2                  S2
  125 00000020         ;               S1                  S1
  126 00000020         ;               S0                  S0
  127 00000020         ;               XPSR                XPSR
  128 00000020         ;               PC                  PC
  129 00000020         ;               LR                  LR
  130 00000020         ;               R12                 R12
  131 00000020         ;               R3                  R3
  132 00000020         ;               R2                  R2



ARM Macro Assembler    Page 4 


  133 00000020         ;               R1                  R1
  134 00000020         ;               R0                  R0
  135 00000020         ;
  136 00000020         ;Input       : None.
  137 00000020         ;Output      : None.
  138 00000020         ;Return      : None.
  139 00000020         ;*******************************************************
                       **********************/
  140 00000020         ;/* Exception Entry Stacking ***************************
                       **********************/
  141 00000020         ;Alignment detection
  142 00000020                 MACRO
  143 00000020                 ALIGN_PUSH       $LABEL      ;Cannot TST SP, unp
                                                            redictable
  144 00000020                 MOV              R0,SP       ;Is SP aligned to 8
                                                             bytes?
  145 00000020                 TST              R0,#0x00000007
  146 00000020                 BNE              $LABEL      ;We pushed two word
                                                            s before, thus NE
  147 00000020                 MEND
  148 00000020         
  149 00000020         ;Exception stacking for basic frame
  150 00000020                 MACRO
  151 00000020                 EXC_PUSH         $SZ,$XPSR,$LR
  152 00000020                 LDR              R0,[SP,#4]  ;Load real R0 value
                                                             pushed at start
  153 00000020                 IF               (($SZ-8)!=0) ;Adjust SP to push
                                                             GP regs when neede
                                                            d
  154 00000020                 SUB              SP,#4*($SZ-8)
  155 00000020                 ENDIF
  156 00000020                 PUSH             {R0-R3,R12,LR} ;Push stack fram
                                                            e GP regs
  157 00000020                 LDR              R0,[SP,#4*($SZ-2)] ;Load real X
                                                            PSR value pushed at
                                                             start
  158 00000020                 LDR              R1,=$XPSR
  159 00000020                 ORR              R0,R1
  160 00000020                 STR              R0,[SP,#4*7]
  161 00000020                 LDR              R0,=_RMP_A7M_Skip ;Push PC with
                                                            [0] cleared
  162 00000020                 AND              R0,#0xFFFFFFFE
  163 00000020                 STR              R0,[SP,#4*6]
  164 00000020                 MOV              LR,#$LR     ;Make up the EXC_RE
                                                            TURN
  165 00000020                 MEND
  166 00000020         
  167 00000020         ;/* Exception Exit Unstacking **************************
                       **********************/
  168 00000020         ;Alignment detection
  169 00000020                 MACRO
  170 00000020                 ALIGN_POP        $LABEL
  171 00000020                 LDR              R0,[SP,#4*7] ;Load up XPSR
  172 00000020                 TST              R0,#0x00000200
  173 00000020                 BNE              $LABEL
  174 00000020                 MEND
  175 00000020         
  176 00000020         ;Exception unstacking for basic frame:
  177 00000020         ;The original sequence is [PAD] [FPU] XPSR PC LR R12 R3-



ARM Macro Assembler    Page 5 


                       R0. This is not
  178 00000020         ;ideal for manual restoring, because restoring PC and SP
                        simulaneously
  179 00000020         ;must be the last step. Thus, we need to transform it.
  180 00000020         ;1. When there is [PAD] or [FPU]:
  181 00000020         ;   Original    : [PAD] [FPU]  XPSR PC LR   R12 R3  - R0
                       
  182 00000020         ;   Transformed : PC   R0 XPSR   [EMPTY]    R12 R3-R1 LR
                       
  183 00000020         ;2. When there is neither [PAD] nor [FPU]:
  184 00000020         ;   Original    : XPSR PC LR   R12 R3  - R0
  185 00000020         ;   Transformed : PC   R0 XPSR R12 R3-R1 LR
  186 00000020         ;This is done in 4 steps:
  187 00000020         ;1. Restore LR from the stack, so it won't be overwritte
                       n;
  188 00000020         ;2. Pop off R0, load XPSR, load PC, and rearrange them a
                       t the end;
  189 00000020         ;3. Pop off R1-R3, pop off LR, then skip the middle;
  190 00000020         ;4. Restore XPSR through R0, then restore R0 and PC.
  191 00000020         ;Note that in the transformation we never place variable
                       s at lower 
  192 00000020         ;addresses than the current SP, as this will run the ris
                       k of a racing
  193 00000020         ;interrupt erasing the variable.
  194 00000020                 MACRO
  195 00000020                 EXC_POP          $SZ
  196 00000020                 LDR              LR,[SP,#4*5] ;Restore LR
  197 00000020                 POP              {R0}        ;Load R0/XPSR/PC in
                                                            to R0/R1/R2
  198 00000020                 LDR              R1,[SP,#4*6]
  199 00000020                 AND              R1,#0xFFFFFDFF ;Clear XPSR[9]
  200 00000020                 LDR              R2,[SP,#4*5]
  201 00000020                 ORR              R2,#0x00000001 ;Set PC[0]
  202 00000020                 STR              R1,[SP,#4*($SZ-4)] ;Rearrange t
                                                            o H-PC-R0-XPSR-L
  203 00000020                 STR              R0,[SP,#4*($SZ-3)]
  204 00000020                 STR              R2,[SP,#4*($SZ-2)]
  205 00000020                 POP              {R1-R3,R12} ;Pop GP regs
  206 00000020                 IF               (($SZ-8)!=0) ;Skip [PAD] and [F
                                                            PU] when needed
  207 00000020                 ADD              SP,#4*($SZ-8)
  208 00000020                 ENDIF
  209 00000020                 POP              {R0}        ;Pop XPSR through R
                                                            0
  210 00000020                 MSR              XPSR,R0
  211 00000020                 POP              {R0,PC}     ;Pop R0 and PC
  212 00000020                 MEND
  213 00000020         
  214 00000020         ;/* User-level Context Switch **************************
                       **********************/
  215 00000020                 AREA             FASTYIELD,CODE,READONLY,ALIGN=3
  216 00000000         _RMP_A7M_RVM_Yield
                               PROC
  217 00000000 B401            PUSH             {R0}        ;Protect R0 and XPS
                                                            R
  218 00000002 F3EF 8003       MRS              R0,XPSR
  219 00000006 B401            PUSH             {R0}
  220 00000008 F3EF 8014       MRS              R0,CONTROL
  221 0000000C F010 0F04       TST              R0,#0x00000004 ;CONTROL.FPCA



ARM Macro Assembler    Page 6 


  222 00000010 D123            BNE              Stk_Extend
  223 00000012         
  224 00000012         Stk_Basic                            ;Basic frame
  225 00000012                 ALIGN_PUSH       Stk_Basic_Unalign
  144 00000012 4668            MOV              R0,SP       ;Is SP aligned to 8
                                                             bytes?
  145 00000014 F010 0F07       TST              R0,#0x00000007
  146 00000018 D10F            BNE              Stk_Basic_Unalign ;We pushed tw
                                                            o words before, thu
                                                            s NE
  226 0000001A         Stk_Basic_Align                      ;Aligned stack
  227 0000001A                 EXC_PUSH         8,0x01000000,0xFFFFFFFD
  152 0000001A 9801            LDR              R0,[SP,#4]  ;Load real R0 value
                                                             pushed at start
  153 0000001C                 IF               ((8-8)!=0)  ;Adjust SP to push 
                                                            GP regs when needed
                                                            
  155                          ENDIF
  156 0000001C E92D 500F       PUSH             {R0-R3,R12,LR} ;Push stack fram
                                                            e GP regs
  157 00000020 9806            LDR              R0,[SP,#4*(8-2)] ;Load real XPS
                                                            R value pushed at s
                                                            tart
  158 00000022 F04F 7180       LDR              R1,=0x01000000
  159 00000026 EA40 0001       ORR              R0,R1
  160 0000002A 9007            STR              R0,[SP,#4*7]
  161 0000002C 485D            LDR              R0,=_RMP_A7M_Skip ;Push PC with
                                                            [0] cleared
  162 0000002E F020 0001       AND              R0,#0xFFFFFFFE
  163 00000032 9006            STR              R0,[SP,#4*6]
  164 00000034 F06F 0E02       MOV              LR,#0xFFFFFFFD ;Make up the EXC
                                                            _RETURN
  228 00000038 E03B            B                Stk_Basic_Done
  229 0000003A         Stk_Basic_Unalign                    ;Unaligned stack
  230 0000003A                 EXC_PUSH         8+1,0x01000200,0xFFFFFFFD
  152 0000003A 9801            LDR              R0,[SP,#4]  ;Load real R0 value
                                                             pushed at start
  153 0000003C                 IF               ((8+1-8)!=0) ;Adjust SP to push
                                                             GP regs when neede
                                                            d
  154 0000003C B081            SUB              SP,#4*(8+1-8)
  155 0000003E                 ENDIF
  156 0000003E E92D 500F       PUSH             {R0-R3,R12,LR} ;Push stack fram
                                                            e GP regs
  157 00000042 9807            LDR              R0,[SP,#4*(8+1-2)] ;Load real X
                                                            PSR value pushed at
                                                             start
  158 00000044 4958            LDR              R1,=0x01000200
  159 00000046 EA40 0001       ORR              R0,R1
  160 0000004A 9007            STR              R0,[SP,#4*7]
  161 0000004C 4855            LDR              R0,=_RMP_A7M_Skip ;Push PC with
                                                            [0] cleared
  162 0000004E F020 0001       AND              R0,#0xFFFFFFFE
  163 00000052 9006            STR              R0,[SP,#4*6]
  164 00000054 F06F 0E02       MOV              LR,#0xFFFFFFFD ;Make up the EXC
                                                            _RETURN
  231 00000058 E02B            B                Stk_Basic_Done
  232 0000005A         
  233 0000005A         Stk_Extend                           ;Extended frame



ARM Macro Assembler    Page 7 


  234 0000005A                 ALIGN_PUSH       Stk_Extend_Unalign
  144 0000005A 4668            MOV              R0,SP       ;Is SP aligned to 8
                                                             bytes?
  145 0000005C F010 0F07       TST              R0,#0x00000007
  146 00000060 D110            BNE              Stk_Extend_Unalign ;We pushed t
                                                            wo words before, th
                                                            us NE
  235 00000062         Stk_Extend_Align                     ;Aligned stack
  236 00000062                 EXC_PUSH         8+17+1,0x01000000,0xFFFFFFED
  152 00000062 9801            LDR              R0,[SP,#4]  ;Load real R0 value
                                                             pushed at start
  153 00000064                 IF               ((8+17+1-8)!=0) ;Adjust SP to p
                                                            ush GP regs when ne
                                                            eded
  154 00000064 B092            SUB              SP,#4*(8+17+1-8)
  155 00000066                 ENDIF
  156 00000066 E92D 500F       PUSH             {R0-R3,R12,LR} ;Push stack fram
                                                            e GP regs
  157 0000006A 9818            LDR              R0,[SP,#4*(8+17+1-2)] ;Load rea
                                                            l XPSR value pushed
                                                             at start
  158 0000006C F04F 7180       LDR              R1,=0x01000000
  159 00000070 EA40 0001       ORR              R0,R1
  160 00000074 9007            STR              R0,[SP,#4*7]
  161 00000076 484B            LDR              R0,=_RMP_A7M_Skip ;Push PC with
                                                            [0] cleared
  162 00000078 F020 0001       AND              R0,#0xFFFFFFFE
  163 0000007C 9006            STR              R0,[SP,#4*6]
  164 0000007E F06F 0E12       MOV              LR,#0xFFFFFFED ;Make up the EXC
                                                            _RETURN
  237 00000082 E00E            B                Stk_Extend_Done
  238 00000084         Stk_Extend_Unalign                   ;Unaligned stack
  239 00000084                 EXC_PUSH         8+17+2,0x01000200,0xFFFFFFED
  152 00000084 9801            LDR              R0,[SP,#4]  ;Load real R0 value
                                                             pushed at start
  153 00000086                 IF               ((8+17+2-8)!=0) ;Adjust SP to p
                                                            ush GP regs when ne
                                                            eded
  154 00000086 B093            SUB              SP,#4*(8+17+2-8)
  155 00000088                 ENDIF
  156 00000088 E92D 500F       PUSH             {R0-R3,R12,LR} ;Push stack fram
                                                            e GP regs
  157 0000008C 9819            LDR              R0,[SP,#4*(8+17+2-2)] ;Load rea
                                                            l XPSR value pushed
                                                             at start
  158 0000008E 4946            LDR              R1,=0x01000200
  159 00000090 EA40 0001       ORR              R0,R1
  160 00000094 9007            STR              R0,[SP,#4*7]
  161 00000096 4843            LDR              R0,=_RMP_A7M_Skip ;Push PC with
                                                            [0] cleared
  162 00000098 F020 0001       AND              R0,#0xFFFFFFFE
  163 0000009C 9006            STR              R0,[SP,#4*6]
  164 0000009E F06F 0E12       MOV              LR,#0xFFFFFFED ;Make up the EXC
                                                            _RETURN
  240 000000A2         Stk_Extend_Done                      ;Extended frame ext
                                                            ra pushing
  241 000000A2 A808            ADD              R0,SP,#4*8  ;Locate FPU stackin
                                                            g area
  242 000000A4 ECA0            DCI              0xECA0      ;Push FPU regs



ARM Macro Assembler    Page 8 


  243 000000A6 0A10            DCI              0x0A10      ;VSTMIA R0!,{S0-S15
                                                            }
  244 000000A8 EEF1            DCI              0xEEF1      ;Push FPSCR
  245 000000AA 1A10            DCI              0x1A10      ;VMRS R1,FPSCR
  246 000000AC 6001            STR              R1,[R0]
  247 000000AE ED2D            DCI              0xED2D      ;Push OS-managed FP
                                                            U regs
  248 000000B0 8A10            DCI              0x8A10      ;VPUSH {S16-S31}
  249 000000B2         
  250 000000B2         Stk_Basic_Done
  251 000000B2 E92D 4FF0       PUSH             {R4-R11,LR} ;Push GP regs
  252 000000B6 4840            LDR              R0,=RVM_Usr_Param
  253 000000B8 6800            LDR              R0,[R0]     ;Push hypercall par
                                                            ameters
  254 000000BA E890 003E       LDMIA            R0,{R1-R5}
  255 000000BE B43E            PUSH             {R1-R5}
  256 000000C0         
  257 000000C0 F7FF FFFE       BL               RVM_Virt_Int_Mask 
                                                            ;Mask interrupts
  258 000000C4 493D            LDR              R1,=RMP_SP_Cur ;Save the SP to 
                                                            control block
  259 000000C6 F8C1 D000       STR              SP,[R1]
  260 000000CA F7FF FFFE       BL               _RMP_Run_High ;Get the highest 
                                                            ready task
  261 000000CE 493B            LDR              R1,=RMP_SP_Cur ;Load the SP
  262 000000D0 F8D1 D000       LDR              SP,[R1]
  263 000000D4 F7FF FFFE       BL               RVM_Virt_Int_Unmask 
                                                            ;Unmask interrupts
  264 000000D8         
  265 000000D8 4837            LDR              R0,=RVM_Usr_Param
  266 000000DA 6800            LDR              R0,[R0]     ;Pop hypercall para
                                                            meters
  267 000000DC BC3E            POP              {R1-R5}
  268 000000DE E880 003E       STMIA            R0,{R1-R5}
  269 000000E2 E8BD 4FF0       POP              {R4-R11,LR} ;Pop GP regs
  270 000000E6         
  271 000000E6 F01E 0F10       TST              LR,#0x00000010 ;LR.EXTENDED
  272 000000EA D028            BEQ              Uns_Extend
  273 000000EC         
  274 000000EC         Uns_Basic                            ;Basic frame
  275 000000EC                 ALIGN_POP        Uns_Basic_Unalign
  171 000000EC 9807            LDR              R0,[SP,#4*7] ;Load up XPSR
  172 000000EE F410 7F00       TST              R0,#0x00000200
  173 000000F2 D111            BNE              Uns_Basic_Unalign
  276 000000F4         Uns_Basic_Align                      ;Aligned stack
  277 000000F4                 EXC_POP          8
  196 000000F4 F8DD E014       LDR              LR,[SP,#4*5] ;Restore LR
  197 000000F8 BC01            POP              {R0}        ;Load R0/XPSR/PC in
                                                            to R0/R1/R2
  198 000000FA 9906            LDR              R1,[SP,#4*6]
  199 000000FC F421 7100       AND              R1,#0xFFFFFDFF ;Clear XPSR[9]
  200 00000100 9A05            LDR              R2,[SP,#4*5]
  201 00000102 F042 0201       ORR              R2,#0x00000001 ;Set PC[0]
  202 00000106 9104            STR              R1,[SP,#4*(8-4)] ;Rearrange to 
                                                            H-PC-R0-XPSR-L
  203 00000108 9005            STR              R0,[SP,#4*(8-3)]
  204 0000010A 9206            STR              R2,[SP,#4*(8-2)]
  205 0000010C E8BD 100E       POP              {R1-R3,R12} ;Pop GP regs
  206 00000110                 IF               ((8-8)!=0)  ;Skip [PAD] and [FP



ARM Macro Assembler    Page 9 


                                                            U] when needed
  208                          ENDIF
  209 00000110 BC01            POP              {R0}        ;Pop XPSR through R
                                                            0
  210 00000112 F380 8803       MSR              XPSR,R0
  211 00000116 BD01            POP              {R0,PC}     ;Pop R0 and PC
  278 00000118         Uns_Basic_Unalign                    ;Unaligned stack
  279 00000118                 EXC_POP          8+1
  196 00000118 F8DD E014       LDR              LR,[SP,#4*5] ;Restore LR
  197 0000011C BC01            POP              {R0}        ;Load R0/XPSR/PC in
                                                            to R0/R1/R2
  198 0000011E 9906            LDR              R1,[SP,#4*6]
  199 00000120 F421 7100       AND              R1,#0xFFFFFDFF ;Clear XPSR[9]
  200 00000124 9A05            LDR              R2,[SP,#4*5]
  201 00000126 F042 0201       ORR              R2,#0x00000001 ;Set PC[0]
  202 0000012A 9105            STR              R1,[SP,#4*(8+1-4)] ;Rearrange t
                                                            o H-PC-R0-XPSR-L
  203 0000012C 9006            STR              R0,[SP,#4*(8+1-3)]
  204 0000012E 9207            STR              R2,[SP,#4*(8+1-2)]
  205 00000130 E8BD 100E       POP              {R1-R3,R12} ;Pop GP regs
  206 00000134                 IF               ((8+1-8)!=0) ;Skip [PAD] and [F
                                                            PU] when needed
  207 00000134 B001            ADD              SP,#4*(8+1-8)
  208 00000136                 ENDIF
  209 00000136 BC01            POP              {R0}        ;Pop XPSR through R
                                                            0
  210 00000138 F380 8803       MSR              XPSR,R0
  211 0000013C BD01            POP              {R0,PC}     ;Pop R0 and PC
  280 0000013E         
  281 0000013E         Uns_Extend                           ;Extended frame ext
                                                            ra popping
  282 0000013E ECBD            DCI              0xECBD      ;Pop OS-managed FPU
                                                             regs
  283 00000140 8A10            DCI              0x8A10      ;VPOP {S16-S31}    
                                                                   
  284 00000142 A818            ADD              R0,SP,#4*(8+16)
  285 00000144 6801            LDR              R1,[R0]
  286 00000146 EEE1            DCI              0xEEE1      ;Pop FPSCR
  287 00000148 1A10            DCI              0x1A10      ;VMSR FPSCR,R1
  288 0000014A ED30            DCI              0xED30      ;Pop FPU regs
  289 0000014C 0A10            DCI              0x0A10      ;VLDMDB R0!,{S0-S15
                                                            }
  290 0000014E                 ALIGN_POP        Uns_Extend_Unalign
  171 0000014E 9807            LDR              R0,[SP,#4*7] ;Load up XPSR
  172 00000150 F410 7F00       TST              R0,#0x00000200
  173 00000154 D112            BNE              Uns_Extend_Unalign
  291 00000156         Uns_Extend_Align                     ;Aligned stack
  292 00000156                 EXC_POP          8+17+1
  196 00000156 F8DD E014       LDR              LR,[SP,#4*5] ;Restore LR
  197 0000015A BC01            POP              {R0}        ;Load R0/XPSR/PC in
                                                            to R0/R1/R2
  198 0000015C 9906            LDR              R1,[SP,#4*6]
  199 0000015E F421 7100       AND              R1,#0xFFFFFDFF ;Clear XPSR[9]
  200 00000162 9A05            LDR              R2,[SP,#4*5]
  201 00000164 F042 0201       ORR              R2,#0x00000001 ;Set PC[0]
  202 00000168 9116            STR              R1,[SP,#4*(8+17+1-4)] ;Rearrang
                                                            e to H-PC-R0-XPSR-L
                                                            
  203 0000016A 9017            STR              R0,[SP,#4*(8+17+1-3)]



ARM Macro Assembler    Page 10 


  204 0000016C 9218            STR              R2,[SP,#4*(8+17+1-2)]
  205 0000016E E8BD 100E       POP              {R1-R3,R12} ;Pop GP regs
  206 00000172                 IF               ((8+17+1-8)!=0) ;Skip [PAD] and
                                                             [FPU] when needed
  207 00000172 B012            ADD              SP,#4*(8+17+1-8)
  208 00000174                 ENDIF
  209 00000174 BC01            POP              {R0}        ;Pop XPSR through R
                                                            0
  210 00000176 F380 8803       MSR              XPSR,R0
  211 0000017A BD01            POP              {R0,PC}     ;Pop R0 and PC
  293 0000017C         Uns_Extend_Unalign                   ;Unaligned stack
  294 0000017C                 EXC_POP          8+17+2
  196 0000017C F8DD E014       LDR              LR,[SP,#4*5] ;Restore LR
  197 00000180 BC01            POP              {R0}        ;Load R0/XPSR/PC in
                                                            to R0/R1/R2
  198 00000182 9906            LDR              R1,[SP,#4*6]
  199 00000184 F421 7100       AND              R1,#0xFFFFFDFF ;Clear XPSR[9]
  200 00000188 9A05            LDR              R2,[SP,#4*5]
  201 0000018A F042 0201       ORR              R2,#0x00000001 ;Set PC[0]
  202 0000018E 9117            STR              R1,[SP,#4*(8+17+2-4)] ;Rearrang
                                                            e to H-PC-R0-XPSR-L
                                                            
  203 00000190 9018            STR              R0,[SP,#4*(8+17+2-3)]
  204 00000192 9219            STR              R2,[SP,#4*(8+17+2-2)]
  205 00000194 E8BD 100E       POP              {R1-R3,R12} ;Pop GP regs
  206 00000198                 IF               ((8+17+2-8)!=0) ;Skip [PAD] and
                                                             [FPU] when needed
  207 00000198 B013            ADD              SP,#4*(8+17+2-8)
  208 0000019A                 ENDIF
  209 0000019A BC01            POP              {R0}        ;Pop XPSR through R
                                                            0
  210 0000019C F380 8803       MSR              XPSR,R0
  211 000001A0 BD01            POP              {R0,PC}     ;Pop R0 and PC
  295 000001A2         
  296 000001A2         _RMP_A7M_Skip                        ;Exit location
  297 000001A2 4770            BX               LR
  298 000001A4                 ENDP
  299 000001A4         ;/* End Function:_RMP_A7M_RVM_Yield ********************
                       **********************/
  300 000001A4                 ALIGN
  301 000001A4 00000000 
              01000200 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000         LTORG
  302 000001C0                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp.sp --depen
d=.\object\rmp_platform_a7m_rvm_armcc.d -o.\object\rmp_platform_a7m_rvm_armcc.o
 -I./ -I../Include/ -I../../../M7M02_Ammonite/Include/ -I../../../M5P01_Prokaro
n/Include/ --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 
537" --predefine="STM32F411xE SETA 1" --list=.\listing\rmp_platform_a7m_rvm_arm
cc.lst ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_platform_a7m_rvm_arm
cc.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ARCH 00000000

Symbol: ARCH
   Definitions
      At line 44 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_pl
atform_a7m_rvm_armcc.s
   Uses
      None
Comment: ARCH unused
_RMP_A7M_RVM_LSB_Get 00000016

Symbol: _RMP_A7M_RVM_LSB_Get
   Definitions
      At line 83 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_pl
atform_a7m_rvm_armcc.s
   Uses
      At line 38 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_pl
atform_a7m_rvm_armcc.s
Comment: _RMP_A7M_RVM_LSB_Get used once
_RMP_A7M_RVM_MSB_Get 00000008

Symbol: _RMP_A7M_RVM_MSB_Get
   Definitions
      At line 69 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_pl
atform_a7m_rvm_armcc.s
   Uses
      At line 37 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_pl
atform_a7m_rvm_armcc.s
Comment: _RMP_A7M_RVM_MSB_Get used once
_RMP_Start 00000000

Symbol: _RMP_Start
   Definitions
      At line 56 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_pl
atform_a7m_rvm_armcc.s
   Uses
      At line 35 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_pl
atform_a7m_rvm_armcc.s
Comment: _RMP_Start used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FASTYIELD 00000000

Symbol: FASTYIELD
   Definitions
      At line 215 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
   Uses
      None
Comment: FASTYIELD unused
Stk_Basic 00000012

Symbol: Stk_Basic
   Definitions
      At line 224 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
   Uses
      None
Comment: Stk_Basic unused
Stk_Basic_Align 0000001A

Symbol: Stk_Basic_Align
   Definitions
      At line 226 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
   Uses
      None
Comment: Stk_Basic_Align unused
Stk_Basic_Done 000000B2

Symbol: Stk_Basic_Done
   Definitions
      At line 250 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
   Uses
      At line 228 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
      At line 231 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s

Stk_Basic_Unalign 0000003A

Symbol: Stk_Basic_Unalign
   Definitions
      At line 229 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
   Uses
      At line 146 in macro ALIGN_PUSH
      at line 225 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
Comment: Stk_Basic_Unalign used once
Stk_Extend 0000005A

Symbol: Stk_Extend
   Definitions
      At line 233 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
   Uses
      At line 222 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: Stk_Extend used once
Stk_Extend_Align 00000062

Symbol: Stk_Extend_Align
   Definitions
      At line 235 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
   Uses
      None
Comment: Stk_Extend_Align unused
Stk_Extend_Done 000000A2

Symbol: Stk_Extend_Done
   Definitions
      At line 240 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
   Uses
      At line 237 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
Comment: Stk_Extend_Done used once
Stk_Extend_Unalign 00000084

Symbol: Stk_Extend_Unalign
   Definitions
      At line 238 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
   Uses
      At line 146 in macro ALIGN_PUSH
      at line 234 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
Comment: Stk_Extend_Unalign used once
Uns_Basic 000000EC

Symbol: Uns_Basic
   Definitions
      At line 274 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
   Uses
      None
Comment: Uns_Basic unused
Uns_Basic_Align 000000F4

Symbol: Uns_Basic_Align
   Definitions
      At line 276 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
   Uses
      None
Comment: Uns_Basic_Align unused
Uns_Basic_Unalign 00000118

Symbol: Uns_Basic_Unalign
   Definitions
      At line 278 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
   Uses
      At line 173 in macro ALIGN_POP
      at line 275 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: Uns_Basic_Unalign used once
Uns_Extend 0000013E

Symbol: Uns_Extend
   Definitions
      At line 281 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
   Uses
      At line 272 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
Comment: Uns_Extend used once
Uns_Extend_Align 00000156

Symbol: Uns_Extend_Align
   Definitions
      At line 291 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
   Uses
      None
Comment: Uns_Extend_Align unused
Uns_Extend_Unalign 0000017C

Symbol: Uns_Extend_Unalign
   Definitions
      At line 293 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
   Uses
      At line 173 in macro ALIGN_POP
      at line 290 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
Comment: Uns_Extend_Unalign used once
_RMP_A7M_RVM_Yield 00000000

Symbol: _RMP_A7M_RVM_Yield
   Definitions
      At line 216 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
   Uses
      At line 40 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_pl
atform_a7m_rvm_armcc.s
Comment: _RMP_A7M_RVM_Yield used once
_RMP_A7M_Skip 000001A2

Symbol: _RMP_A7M_Skip
   Definitions
      At line 296 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
   Uses
      At line 161 in macro EXC_PUSH
      at line 227 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
Comment: _RMP_A7M_Skip used once
17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

RMP_SP_Cur 00000000

Symbol: RMP_SP_Cur
   Definitions
      At line 25 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_pl
atform_a7m_rvm_armcc.s
   Uses
      At line 258 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
      At line 261 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s

RVM_Usr_Param 00000000

Symbol: RVM_Usr_Param
   Definitions
      At line 30 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_pl
atform_a7m_rvm_armcc.s
   Uses
      At line 252 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
      At line 265 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s

RVM_Virt_Int_Mask 00000000

Symbol: RVM_Virt_Int_Mask
   Definitions
      At line 27 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_pl
atform_a7m_rvm_armcc.s
   Uses
      At line 257 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
Comment: RVM_Virt_Int_Mask used once
RVM_Virt_Int_Unmask 00000000

Symbol: RVM_Virt_Int_Unmask
   Definitions
      At line 28 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_pl
atform_a7m_rvm_armcc.s
   Uses
      At line 263 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
Comment: RVM_Virt_Int_Unmask used once
_RMP_Run_High 00000000

Symbol: _RMP_Run_High
   Definitions
      At line 23 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_pl
atform_a7m_rvm_armcc.s
   Uses
      At line 260 in file ../../../M5P01_Prokaron/Source/Platform/A7M_RVM/rmp_p
latform_a7m_rvm_armcc.s
Comment: _RMP_Run_High used once
5 symbols
362 symbols in table
